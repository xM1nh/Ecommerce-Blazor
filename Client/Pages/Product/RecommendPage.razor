@implements IDisposable
@if (ProductService.FeaturedProducts is not null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="card border-success shadow card-container mb-2 mt-2">
                <SfCarousel ButtonsVisibility="CarouselButtonVisibility.VisibleOnHover" AnimationEffect="CarouselAnimationEffect.Slide" AutoPlay ShowIndicators>
                    <ChildContent>
                        @foreach (var item in RecommnendCarouselGroupProducts)
                        {
                            <CarouselItem>
                                <figure>
                                    <div class="row">
                                        @foreach (var product in item.Value)
                                        {
                                            <div class="col-lg-2 card-container-display">
                                                <div class="card border-success shadow">
                                                    <div class="card-body d-flex justify-content-between">
                                                        <img src="@product.Base64Img" width="100" height="150" class="d-flex justify-content-center" style="margin-right:5px" />
                                                        <div class="vstack gap-1">
                                                            <h5>@product.Name</h5>
                                                            <h6>@(GenericHelper.GetDescription(product.Description!))</h6>
                                                            <h6 class="text-danger">@product.Price</h6>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </figure>
                            </CarouselItem>
                        }
                    </ChildContent>
                    <PreviousButtonTemplate>
                        <img src="../resources/previous.png" width="50" height="50" id="styleCursor" />
                    </PreviousButtonTemplate>
                    <NextButtonTemplate>
                        <img src="../resources/next.png" width="50" height="50" id="styleCursor" />
                    </NextButtonTemplate>

                    <IndicatorsTemplate>
                        <div class="indicator"> </div>
                    </IndicatorsTemplate>
                </SfCarousel>
            </div>
        </div>
    </div>
}

@code {
    List<Product> FeaturedProducts { get; set; } = new();
    Dictionary<int, List<Product>> RecommnendCarouselGroupProducts = new();

    protected async override Task OnInitializedAsync()
    {
        await ProductService.GetFeaturedProducts();
        FeaturedProducts = ProductService.FeaturedProducts;
        ProductService.Action += StateHasChanged;
        Populate();
    }

    private void Populate()
    {
        int itemPerView = 6;
        int totalProducts = ProductService.FeaturedProducts.Count;
        int numberOfGroups = totalProducts / itemPerView;
        int skip = 0;

        if (numberOfGroups <= 0)
        {
            return;
        }

        for (int i = 0; i < numberOfGroups; i++)
        {
            var products = ProductService.FeaturedProducts.Skip(skip).Take(itemPerView).ToList();
            RecommnendCarouselGroupProducts.Add(i, products);
            skip += itemPerView;
        }
    }

    public void Dispose()
    {
        ProductService.Action -= StateHasChanged;
    }
}
