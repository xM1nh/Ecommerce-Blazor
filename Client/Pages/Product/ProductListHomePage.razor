@page "/products"

@implements IDisposable
@if (ProductService.IsFetching)
{
    <Loader />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-2">
                <CategoriesPage CategoryClickedEvent="CategoryClickedEvent" DefaultCategoryClickedEvent="DefaultCategoryClickedEvent" />
            </div>
            <div class="col-lg-10">
                <BannerPage />
                <div class="card border-0">
                    <div class="card-header border-success-subtle mb-2"></div>
                    <ProductListPage AllProducts="ProductService.ProductsByCategory ?? ProductService.Products" />
                </div>
            </div>
            <div class="col-lg-12 mt-5">
                <div class="card border-0" style="position:absolute; left:1px; right:1px">
                    <div class="card-header border-danger-subtle">Recommed Products</div>
                    <RecommendPage />
                </div>
            </div>
        </div>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await ProductService.GetAllProducts();
        ProductService.Action += StateHasChanged;
    }
    private async void CategoryClickedEvent(int id)
    {
        if (id == 0)
        {
            return;
        }

        await ProductService.GetProductsByCategory(id);
    }

    private async void DefaultCategoryClickedEvent()
    {
        ProductService.ProductsByCategory = null!;
        await ProductService.GetAllProducts();
    }

    public void Dispose()
    {
        ProductService.Action -= StateHasChanged;
    }
}
