<div class="container-fluid mt-5">
    <div class="row">
        <div class="col-md-12 col-sm-12">
            <hr />
            <span style="font-family:MyFont">Featured</span>
            <div class="card border-0">
                <div class="card-body">
                    <div class="d-flex justify-content-evenly align-items-center">
                        <img src="/resources/previous.png" width="50" height="50" id="styleCursor" @onclick="PreviousButton"/>
                        @if (FeaturedProducts is null) return;
                        @foreach (var item in FeaturedProducts)
                        {
                            <div class="card">
                                <div class="card-body">
                                    @if (item.DateUploaded.AddDays(30) > DateTime.Now)
                                    {
                                        <span class="badge bg-primary d-flex align-items-end float-end" style="width:50px">New</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-none d-flex align-items-end float-end" style="width:50px; height:20px"></span>
                                    }
                                    <img class="card-img-top childImage" src="@item.Base64Img" width="150" height="200" style="max-width:150px; min-width:150px"/>
                                    <div id="productCover" class="bg-secondary text-white d-flex justify-content-center text-wrap">@item.Name</div>
                                </div>
                            </div>
                        }
                        <img src="/resources/next.png" width="50" height="50" id="styleCursor" @onclick="NextButton" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    #styleCursor {
        cursor: pointer;
    }

    #productCover {
        width: 150px;
        font-size: 14px;
        height: 50px;
        position: absolute;
        bottom: 10px;
        border-radius: 10px;
        padding: 2px;
        cursor: pointer;
    }

    #productCover:hover {
        opacity: 1
    }

    img {
        opacity: 1;
        cursor: pointer;
    }

    .childImage:hover {
        opacity: 0.5;
    }
</style>

@code {
    List<Product> ProductList = new();
    List<Product> FeaturedProducts = new();

    public int PageSize { get; set; } = 8;
    public int Skip { get; set; } = 0;
    public int Take { get; set; } = 8;

    protected override async Task OnInitializedAsync()
    {
        await GetFeaturedProducts();
    }

    private async Task GetFeaturedProducts()
    {
        ProductList?.Clear();

        var result = await ProductService.GetFeaturedProducts();

        if (result is null) return;
        ProductList!.AddRange(result);

        LoadData();
    }

    private void LoadData()
    {
        var getData = ProductList!.Skip(Skip).Take(Take).ToList();
        Skip += PageSize;
        FeaturedProducts?.Clear();
        FeaturedProducts!.AddRange(getData);
    }

    private void PreviousButton()
    {
        if (Skip == 8) return;
        var getNextProducts = ProductList!.Skip(Skip - (PageSize * 2)).Take(Take);
        Skip -= PageSize;
        FeaturedProducts?.Clear();
        FeaturedProducts!.AddRange(getNextProducts);
    }

    private void NextButton()
    {
        if (Skip >= ProductList.Count) return;
        var getNextProducts = ProductList!.Skip(Skip).Take(Take);
        Skip += PageSize;
        FeaturedProducts?.Clear();
        FeaturedProducts!.AddRange(getNextProducts);
    }
}
